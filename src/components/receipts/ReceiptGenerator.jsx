import { useState } from 'react';
import { useAuth } from '../../contexts/AuthContext';
import { FiMail, FiDownload, FiEdit } from 'react-icons/fi';
import { PDFDownloadLink } from '@react-pdf/renderer';
import ReceiptPDF from './ReceiptPDF';

const ReceiptGenerator = ({ sessions, payoutDetails }) => {
  const { user } = useAuth();
  const { permissions } = useAuth();
  const [message, setMessage] = useState('Thank you for your contribution!');
  const [isSending, setIsSending] = useState(false);
  const [isSent, setIsSent] = useState(false);

  const generateReceiptData = () => ({
    mentorName: sessions[0]?.mentorName || 'Mentor',
    date: new Date().toLocaleDateString(),
    sessions: sessions.map(s => ({
      date: new Date(s.sessionDate).toLocaleDateString(),
      type: s.sessionType,
      duration: `${s.duration} mins`,
      rate: `₹${s.ratePerHour}/hr`,
      payout: `₹${s.payout.toFixed(2)}`
    })),
    subtotal: `₹${payoutDetails.subtotal.toFixed(2)}`,
    deductions: {
      platformFee: `₹${payoutDetails.platformFee.toFixed(2)}`,
      gst: `₹${payoutDetails.gst.toFixed(2)}`,
      tds: `₹${payoutDetails.tds.toFixed(2)}`
    },
    total: `₹${payoutDetails.total.toFixed(2)}`,
    message
  });

  const handleSendEmail = async () => {
    setIsSending(true);
    // Simulate email sending
    await new Promise(resolve => setTimeout(resolve, 1500));
    setIsSending(false);
    setIsSent(true);
    setTimeout(() => setIsSent(false), 3000);
  };


  return (
    <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6">
      <h2 className="text-xl font-bold text-gray-900 dark:text-white mb-4">Generate Receipt</h2>

      {/* Receipt Preview */}
      <div className="border border-gray-200 dark:border-gray-700 rounded-lg p-4 mb-6">
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white">Receipt Preview</h3>
          <PDFDownloadLink
            document={<ReceiptPDF receiptData={generateReceiptData()} />}
            fileName={`receipt_${generateReceiptData().mentorName}.pdf`}
          >
            {({ loading }) => (
              <button className="flex items-center gap-1 text-blue-600 dark:text-blue-400">
                <FiDownload /> {loading ? 'Generating...' : 'Download PDF'}
              </button>
            )}
          </PDFDownloadLink>
        </div>

        <div className="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg">
          <div className="flex justify-between mb-4">
            <div>
              <h4 className="font-bold text-gray-900 dark:text-white">EdTech Mentors Program</h4>
              <p className="text-sm text-gray-600 dark:text-gray-300">Receipt Date: {new Date().toLocaleDateString()}</p>
            </div>
            <div className="text-right">
              <h4 className="font-bold text-gray-900 dark:text-white">
                {sessions[0]?.mentorName || 'Mentor Name'}
              </h4>
              <p className="text-sm text-gray-600 dark:text-gray-300">Generated by: {user?.name}</p>
            </div>
          </div>

          <div className="border-t border-b border-gray-200 dark:border-gray-600 py-2 my-2">
            <table className="w-full">
              <thead>
                <tr className="text-left text-sm text-gray-500 dark:text-gray-400">
                  <th className="pb-2">Date</th>
                  <th className="pb-2">Type</th>
                  <th className="pb-2">Duration</th>
                  <th className="pb-2">Rate</th>
                  <th className="pb-2 text-right">Amount</th>
                </tr>
              </thead>
              <tbody>
                {sessions.map((session, index) => (
                  <tr key={index} className="text-sm">
                    <td className="py-1">{new Date(session.sessionDate).toLocaleDateString()}</td>
                    <td className="py-1 capitalize">{session.sessionType}</td>
                    <td className="py-1">{session.duration} mins</td>
                    <td className="py-1">₹{session.ratePerHour}/hr</td>
                    <td className="py-1 text-right">₹{session.payout.toFixed(2)}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          <div className="text-right mt-4">
            <div className="flex justify-between max-w-xs ml-auto">
              <span className="text-gray-600 dark:text-gray-300">Subtotal:</span>
              <span>₹{payoutDetails.subtotal.toFixed(2)}</span>
            </div>
            <div className="flex justify-between max-w-xs ml-auto">
              <span className="text-gray-600 dark:text-gray-300">Platform Fee ({payoutDetails.platformFeePercent}%):</span>
              <span>-₹{payoutDetails.platformFee.toFixed(2)}</span>
            </div>
            <div className="flex justify-between max-w-xs ml-auto">
              <span className="text-gray-600 dark:text-gray-300">GST ({payoutDetails.gstRate}%):</span>
              <span>-₹{payoutDetails.gst.toFixed(2)}</span>
            </div>
            <div className="flex justify-between max-w-xs ml-auto">
              <span className="text-gray-600 dark:text-gray-300">TDS ({payoutDetails.tdsRate}%):</span>
              <span>-₹{payoutDetails.tds.toFixed(2)}</span>
            </div>
            <div className="border-t border-gray-200 dark:border-gray-600 mt-2 pt-2 font-bold">
              <div className="flex justify-between max-w-xs ml-auto">
                <span>Total Payout:</span>
                <span>₹{payoutDetails.total.toFixed(2)}</span>
              </div>
            </div>
          </div>

          {message && (
            <div className="mt-4 p-3 bg-blue-50 dark:bg-gray-600 rounded">
              <p className="text-sm text-gray-700 dark:text-gray-200">{message}</p>
            </div>
          )}
        </div>
      </div>

      {/* Custom Message */}
      <div className="mb-6">
        <label className="block text-gray-700 dark:text-gray-300 mb-2">Custom Message</label>
        <div className="flex gap-2">
          <input
            type="text"
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            className="flex-1 p-2 border rounded dark:bg-gray-700 dark:border-gray-600"
            placeholder="Add a custom message..."
          />
          <button
            onClick={() => setMessage('Thank you for your contribution!')}
            className="p-2 bg-gray-100 dark:bg-gray-700 rounded"
            title="Reset to default"
          >
            <FiEdit />
          </button>
        </div>
      </div>

      {/* Action Buttons */}
      <div className="flex gap-3">
        {permissions?.receipts.generate && (
          <button
            onClick={handleSendEmail}
            disabled={isSending}
            className={`flex items-center gap-2 px-4 py-2 rounded text-white ${isSending ? 'bg-blue-400' : 'bg-blue-600 hover:bg-blue-700'
              }`}
          >
            <FiMail /> {isSending ? 'Sending...' : 'Send via Email'}
          </button>
        )}
        {isSent && (
          <div className="flex items-center px-3 bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 rounded">
            Receipt sent successfully!
          </div>
        )}
      </div>
    </div>
  );
};

export default ReceiptGenerator;